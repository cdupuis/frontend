name: docker-build

on: 
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request_target:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
  DOCKERFILE_PATH: Dockerfile

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.SHA }}

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.revision=${{ env.SHA }}
            com.docker.image.source.entrypoint=${{ env.DOCKERFILE_PATH }}

      - name: Build and push Docker image on push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: "linux/amd64,linux/arm64"
          provenance: true
          attests: type=sbom,generator=docker/scout-sbom-indexer:1
      
      - name: Log into registry
        uses: docker/login-action@v3
        with:
          username: cdupuis
          password: ${{ secrets.HUB_PAT }}

      - name: Scan image for CVEs
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ steps.meta.outputs.tags }}
          only-severities: critical,high 

      - name: Create secret scanning report
        run: |
          mkdir -m 777 $(pwd)/report
          docker run -v $(pwd)/report:/report -e DOCKER_SCOUT_HUB_USER=cdupuis -e DOCKER_SCOUT_HUB_PASSWORD=${{ secrets.HUB_PAT }} -e DOCKER_SCOUT_REGISTRY_USER=${{ github.actor }} -e DOCKER_SCOUT_REGISTRY_PASSWORD=${{ secrets.GITHUB_TOKEN }} docker/scout-cli:a052b4e sbom ${{ steps.meta.outputs.tags }} --include-secrets --output /report/scout.sbom.json
          cat $(pwd)/report/scout.sbom.json | jq .secrets > $(pwd)/report/scout.secrets.json

      - name: Attach secret scanning report
        run: |
          docker run -v $(pwd)/report:/report -e DOCKER_SCOUT_HUB_USER=cdupuis -e DOCKER_SCOUT_HUB_PASSWORD=${{ secrets.HUB_PAT }} -e DOCKER_SCOUT_REGISTRY_USER=${{ github.actor }} -e DOCKER_SCOUT_REGISTRY_PASSWORD=${{ secrets.GITHUB_TOKEN }} -e DOCKER_SCOUT_REGISTRY_WRITE_USER=cdupuis -e DOCKER_SCOUT_REGISTRY_WRITE_PASSWORD=${{ secrets.HUB_PAT }} docker/scout-cli:149a075 attest add ${{ steps.meta.outputs.tags }} --file /report/scout.secrets.json --predicate-type https://scout.docker.com/secrets/v0.1 --referrer --org cdupuis    

      - name: Output image
        id: image
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          image_name="${{steps.meta.outputs.tags}}"
          echo "image=$image_name" >> "$GITHUB_OUTPUT"

  #provenance:
  #  needs: [build]
  #  permissions:
  #    actions: read # for detecting the Github Actions environment.
  #    id-token: write # for creating OIDC tokens for signing.
  #    packages: write
  #  uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
  #  with:
  #    image: ${{ needs.build.outputs.image }}
  #    # The image digest is used to prevent TOCTOU issues.
  #    # This is an output of the docker/build-push-action
  #    # See: https://github.com/slsa-framework/slsa-verifier#toctou-attacks
  #    digest: ${{ needs.build.outputs.digest }}
  #    registry-username: cdupuis
  #  secrets:
  #    registry-password: ${{ secrets.HUB_PAT }}          
